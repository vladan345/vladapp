{"version":3,"sources":["components/InputBox/InputText/InputText.js","components/InputBox/InputHours/InputHours.js","components/InputBox/InputBox.js","containers/SmartWrap/SmartWrap.js","containers/App.js","serviceWorker.js","index.js"],"names":["InputText","props","className","type","min","max","InputHours","state","hoursValue","plusOne","setState","minusOne","value","this","disabled","onClick","Component","InputBox","SmartWrap","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAWeA,G,MATG,SAACC,GACjB,OACE,yBAAKC,UAAU,aACb,yCACA,2BAAOC,KAAK,OAAOD,UAAU,kBAAkBE,IAAI,IAAIC,IAAI,SCsClDC,G,kNAzCbC,MAAQ,CACNC,WAAY,G,EAEdC,QAAU,WACJ,EAAKF,MAAMC,WAAa,EAC1B,EAAKE,SAAS,CAAEF,WAAY,EAAKD,MAAMC,aAEvC,EAAKE,SAAS,CAAEF,WAAY,EAAKD,MAAMC,WAAa,K,EAGxDG,SAAW,WACL,EAAKJ,MAAMC,WAAa,EAC1B,EAAKE,SAAS,CAAEF,WAAY,EAAKD,MAAMC,aAEvC,EAAKE,SAAS,CAAEF,WAAY,EAAKD,MAAMC,WAAa,K,uDAKtD,OACE,yBAAKN,UAAU,cACb,0DACA,yBAAKA,UAAU,iBACb,2BACEC,KAAK,SACLD,UAAU,mBACVE,IAAI,IACJC,IAAI,IACJO,MAAOC,KAAKN,MAAMC,WAClBM,UAAQ,IAEV,yBAAKZ,UAAU,gBACb,4BAAQa,QAASF,KAAKJ,SAAtB,KACA,4BAAQM,QAASF,KAAKF,UAAtB,Y,GAlCaK,cCaVC,G,MAVE,SAAChB,GAChB,OACE,yBAAKC,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,SAAlB,YCGSgB,G,6KARX,OACE,yBAAKhB,UAAU,aACb,kBAAC,EAAD,W,GAJgBc,cCYTG,E,uKATX,OACE,yBAAKjB,UAAU,OACb,wDACA,kBAAC,EAAD,W,GALUc,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b5c484b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InputText = (props) => {\r\n  return (\r\n    <div className=\"InputText\">\r\n      <p>Enter task</p>\r\n      <input type=\"text\" className=\"InputText-field\" min=\"1\" max=\"8\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputText;\r\n","import React, { Component } from \"react\";\r\nimport \"./InputHours.css\";\r\nclass InputHours extends Component {\r\n  state = {\r\n    hoursValue: 1,\r\n  };\r\n  plusOne = () => {\r\n    if (this.state.hoursValue > 7) {\r\n      this.setState({ hoursValue: this.state.hoursValue });\r\n    } else {\r\n      this.setState({ hoursValue: this.state.hoursValue + 1 });\r\n    }\r\n  };\r\n  minusOne = () => {\r\n    if (this.state.hoursValue < 2) {\r\n      this.setState({ hoursValue: this.state.hoursValue });\r\n    } else {\r\n      this.setState({ hoursValue: this.state.hoursValue - 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"InputHours\">\r\n        <p>Enter number of hours (1-8)</p>\r\n        <div className=\"inputControls\">\r\n          <input\r\n            type=\"number\"\r\n            className=\"InputHours-field\"\r\n            min=\"1\"\r\n            max=\"8\"\r\n            value={this.state.hoursValue}\r\n            disabled\r\n          />\r\n          <div className=\"HoursButtons\">\r\n            <button onClick={this.plusOne}>+</button>\r\n            <button onClick={this.minusOne}>-</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputHours;\r\n","import React from \"react\";\r\nimport InputText from \"./InputText/InputText\";\r\nimport InputHours from \"./InputHours/InputHours\";\r\nimport \"./InputBox.css\";\r\n\r\nconst InputBox = (props) => {\r\n  return (\r\n    <div className=\"InputBox\">\r\n      <InputText />\r\n      <InputHours />\r\n      <button className=\"start\">Start</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputBox;\r\n","import React, { Component } from \"react\";\r\nimport InputBox from \"../../components/InputBox/InputBox\";\r\nimport \"./SmartWrap.css\";\r\nclass SmartWrap extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SmartWrap\">\r\n        <InputBox />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SmartWrap;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SmartWrap from \"./SmartWrap/SmartWrap\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>PapaVlad's working timer</h1>\n        <SmartWrap />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}