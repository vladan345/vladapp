{"version":3,"sources":["assets/pause.svg","assets/play.svg","assets/help.svg","components/Input/Clock/Clock.js","components/Input/Input.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","state","h","props","hours","m","s","taskValueStart","start","setState","task","timer","setInterval","pause","clearInterval","className","onClick","this","src","alt","play","help","Component","Input","hoursValue","taskValue","plusOne","minusOne","taskHandler","event","target","value","type","min","max","onChange","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.26564f01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pause.ada5f0bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/play.0cbb3de4.svg\";","module.exports = __webpack_public_path__ + \"static/media/help.4f6520ba.svg\";","import React, { Component } from \"react\";\r\nimport \"./Clock.css\";\r\nimport pause from \"../../../assets/pause.svg\";\r\nimport play from \"../../../assets/play.svg\";\r\nimport help from \"../../../assets/help.svg\";\r\n\r\nclass Clock extends Component {\r\n  state = {\r\n    h: this.props.hours,\r\n    m: \"0\" + 0,\r\n    s: \"0\" + 0,\r\n    taskValueStart: <span>&nbsp;</span>,\r\n  };\r\n  timer;\r\n  start = () => {\r\n    this.setState({ taskValueStart: this.props.task });\r\n    this.timer = setInterval(() => {\r\n      this.setState({ h: this.props.hours });\r\n      this.setState({ s: this.state.s - 1 });\r\n\r\n      if (this.state.s < 0) {\r\n        this.setState({ s: 59 });\r\n      }\r\n      this.state.s < 10\r\n        ? this.setState({ s: \"0\" + this.state.s })\r\n        : this.setState({ s: this.state.s });\r\n\r\n      //------------------------------------------------//\r\n      if (this.state.s === 59) {\r\n        this.setState({ m: this.state.m - 1 });\r\n        if (this.state.m < 0) {\r\n          this.setState({ m: 59 });\r\n        } else {\r\n          if (this.state.m < 10) {\r\n            this.setState({ m: \"0\" + this.state.m });\r\n          }\r\n        }\r\n      }\r\n\r\n      //------------------------------------------------//\r\n      if (this.state.m === 59) {\r\n        this.setState({ h: this.state.h - 1 });\r\n      }\r\n      if (this.state.h < 0) {\r\n        this.setState({ h: 0 });\r\n      }\r\n    }, 1000);\r\n  };\r\n  pause = () => {\r\n    clearInterval(this.timer);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Clock\">\r\n        <button className=\"start\" onClick={this.start}>\r\n          Start\r\n        </button>\r\n        <h1 className=\"taskHeader\">{this.state.taskValueStart}</h1>\r\n        <div className=\"Timer\">\r\n          <h2>\r\n            0{this.state.h}:{this.state.m}:{this.state.s}\r\n          </h2>\r\n          <div className=\"controls\">\r\n            <button className=\"controlBtn\" onClick={this.pause}>\r\n              <img src={pause} alt=\"pause\" />\r\n            </button>\r\n            <button className=\"controlBtn\" onClick={this.start}>\r\n              <img src={play} alt=\"play\" />\r\n            </button>\r\n            <button className=\"controlBtn\">\r\n              <img src={help} alt=\"help\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\nimport \"./Input.css\";\r\nimport Clock from \"./Clock/Clock\";\r\nclass Input extends Component {\r\n  state = {\r\n    hoursValue: 0,\r\n    taskValue: \"\",\r\n  };\r\n\r\n  plusOne = () => {\r\n    if (this.state.hoursValue > 7) {\r\n      this.setState({ hoursValue: this.state.hoursValue });\r\n    } else {\r\n      this.setState({ hoursValue: this.state.hoursValue + 1 });\r\n    }\r\n  };\r\n  minusOne = () => {\r\n    if (this.state.hoursValue < 2) {\r\n      this.setState({ hoursValue: this.state.hoursValue });\r\n    } else {\r\n      this.setState({ hoursValue: this.state.hoursValue - 1 });\r\n    }\r\n  };\r\n  taskHandler = (event) => {\r\n    this.setState({ taskValue: event.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Input\">\r\n        <div className=\"InputWrap\">\r\n          <div className=\"InputText\">\r\n            <p>Enter task</p>\r\n            <input\r\n              type=\"text\"\r\n              className=\"InputText-field\"\r\n              min=\"1\"\r\n              max=\"8\"\r\n              onChange={this.taskHandler}\r\n            />\r\n          </div>\r\n          <div className=\"InputHours\">\r\n            <p>Enter number of hours (1-8)</p>\r\n            <div className=\"inputControls\">\r\n              <input\r\n                type=\"number\"\r\n                className=\"InputHours-field\"\r\n                min=\"1\"\r\n                max=\"8\"\r\n                value={this.state.hoursValue}\r\n                disabled\r\n              />\r\n              <div className=\"HoursButtons\">\r\n                <button onClick={this.plusOne}>+</button>\r\n                <button onClick={this.minusOne}>-</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Clock hours={this.state.hoursValue} task={this.state.taskValue} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Input;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"../components/Input/Input\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>PapaVlad's working timer</h1>\n        <Input />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}